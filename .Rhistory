psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
if (response.type == 'absolute') fmat = apply(theta[,which(prand>0),j+1], 1, con_fut_check, MID = MID)
if (response.type == 'rate') fmat = apply(p_new[,which(prand>0)], 1, con_fut_check, MID = MID)
if (is.null(dim(fmat))) fmat = matrix(fmat, N, length(which(prand>0)) - 1) else fmat = t(fmat)
fcheck[,which(prand>0)] = cbind(rep(0, N), fmat)
fcheck[,which(prand==0)] = 0
pfut = apply(fcheck, 2, mean)
ff = NULL
if (length(which(pfut > uppfut))>0) ff = which(pfut > uppfut)
if (!is.null(ff)) {
fut.stop = c(fut.stop, ff)
}
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
}
}
psup_out[,1] = c(0,rep(1/(nt0-1), (nt - 1)))
ntj = length(which(psup[,j+1]>0)) + 1
prand = rep(0, nt)
prand[which(psup[,j+1]>0)]  = 1
prand[1] = 1
if (length(y)>=burn) prand[which(pfut > uppfut)] = 0
}
if ((((max(psup[,j+1]) > upper) | sum(prand>0) <= 1  | length(y) >= maxN)) & length(y)>=burn) break
}
if (conjugate_prior == T) {
if (response.type == 'absolute') {
p.est = post0[,1]
low = apply(post0, 1, function(z) qnorm(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qnorm(.975, z[1], z[2]))
}
if (response.type == "rate") {
p.est = post0[,1]/apply(post0,1,sum)
low = apply(post0, 1, function(z) qbeta(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qbeta(.975, z[1], z[2]))
}
if (response.type == "count") {
p.est = post0[,1]/post0[,2]
low = apply(post0, 1, function(z) qgamma(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qgamma(.975, z[1], z[2]))
}
est = data.frame(p.est = p.est, low = low, up = up)
} else est = NULL
if (good.out == F) {
if (response.type == 'absolute') {
theta = - theta
est = -est
low = est$low
est$low = est$up
est$up = low
}
if (response.type == 'rate') {
theta = 1 - theta
est = 1 - est
low = est$low
est$low = est$up
est$up = low
}
}
out = list(psup0 = psup, psup = psup_out, theta = theta, est = est, y = y, x = x[,-1], x0 = x0[,-1])
class(out) = 'trial'
return(out)
}
RAR_sim = function(nt, theta0, good.out = T, nb = 1, maxN = 500, N = 1000, upper = 0.975, uppfut = 0.95, lower = .01,
burn = 10*nt, response.type, conjugate_prior = T, padhere = rep(1,nt), adapt = T,
compCon = F, MID = 0) {
if (good.out == F) {
if (response.type == 'absolute') theta0 = - theta0
if (response.type == 'rate') theta0 = 1 - theta0
}
ng = nb
j = 0
x = array(0, dim = c(nt, 1))
x0 = array(0, dim = c(nt, 1))
y = NULL
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
check = array(0, dim = c(N, nt))
fcheck = array(0, dim = c(N, nt))
if (conjugate_prior != T | response.type == "absolute") post0 = cbind(rep(0, nt), rep(10, nt))
if (conjugate_prior == T & response.type == "rate") {
post0 = cbind(rep(1, nt), rep(1, nt))
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta = array(- log((1 - p_new) / p_new), dim = c(N, nt, 1))
}
if (conjugate_prior == T & response.type == "count") {
post0 = cbind(rep(.1, nt), rep(.001, nt))
lambda_new = apply(post0, 1, function(x) rgamma(N, x[1], x[2]))
theta = array(log(lambda_new), dim = c(N, nt, 1))
}
psup = array(rep(1/nt, nt), dim = c(nt, 1))
psup_out = array(rep(1/nt, nt), dim = c(nt, 1))
prand = rep(1/nt, nt)
fut.stop = NULL
repeat {
j = j + 1
# if (is.function(updateProgress)) {
#   text <- paste0("updating results based on batch/patient:", j)
#   updateProgress(detail = text)
# }
if (j*nb>maxN) nb = maxN - (j-1)*nb
xb = rmultinom(nb, 1, prob = prand)
xb0 = xb
for (k in 1:nb) {
xb0[which(xb0[,k] == 1), k] = rbinom(1, 1, padhere[which(xb0[,k] == 1)])
}
if (response.type == 'rate') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rbinom(1, 1, prob = z))
}
if (response.type == 'count') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
if (response.type == 'absolute') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rnorm(1, z))
}
x = abind(x, xb, along = 2)
x0 = abind(x0, xb0, along = 2)
y = c(y, yb)
if ((response.type == 'rate' | response.type == 'count') & conjugate_prior != T) {
smc_out = SMC_step(theta[,,j], x = xb0, y = yb, N = N, response.type)
theta_new = smc_out$theta
qt = apply(theta_new, 2, sd)/3
Gibbs_out = apply(theta_new, 1, Gibbs, y = y, x = x[,-1], qt = qt,
response.type = response.type, ng)
theta_new = t(sapply(Gibbs_out, function(l) return(l$theta)))
}
if (response.type == 'rate' & conjugate_prior == T) {
post0 = post_beta(yb, xb, post0)
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta_new = - log((1 - p_new) / p_new)
}
if (response.type == 'count' & conjugate_prior == T) {
post0 = post_gamma(yb, xb, post0)
lambda_new = apply(post0, 1, function(x) rgamma(N, x[1], x[2]))
theta_new = log(lambda_new)
}
if (response.type == 'absolute') {
ysd = ifelse(length(y) == 1, 1, sd(y))
post0 = post_Gauss(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
#theta_new[,which(addarmlater>j)] = -Inf
theta = abind(theta, theta_new, along = 3)
if (compCon == F) {
check[,which(prand>0)] = t(apply(theta[,which(prand>0),j+1], 1, sup_check))
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
ll = NULL
if (length(which(psup[,j+1] < lower))>0) {
ll = which(psup[,j+1] < lower)
}
if (length(ll) != 0) {
fut.stop = c(fut.stop, ll)
}
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
}
ntj = length(which(psup[,j+1]>0))
prand = rep(0, nt)
if (adapt == T & length(y)>=burn)  {
prand[which(psup[,j+1]>0)] = ((ntj - 1)/ntj)*sqrt(psup[which(addarmlater<=j & psup[,j+1]>0),j+1])
} else prand[which(psup[,j+1]>0)] = 1/ntj
} else {
mat = apply(theta[,which(prand>0),j+1], 1, con_sup_check)
if (is.null(dim(mat))) mat = matrix(mat, N, length(which(prand>0)) - 1) else mat = t(mat)
check[,which(prand>0)] = cbind(rep(0, N), mat)
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
if (response.type == 'absolute') fmat = apply(theta[,which(prand>0),j+1], 1, con_fut_check, MID = MID)
if (response.type == 'rate') fmat = apply(p_new[,which(prand>0)], 1, con_fut_check, MID = MID)
if (is.null(dim(fmat))) fmat = matrix(fmat, N, length(which(prand>0)) - 1) else fmat = t(fmat)
fcheck[,which(prand>0)] = cbind(rep(0, N), fmat)
fcheck[,which(prand==0)] = 0
pfut = apply(fcheck, 2, mean)
ff = NULL
if (length(which(pfut > uppfut))>0) ff = which(pfut > uppfut)
if (!is.null(ff)) {
fut.stop = c(fut.stop, ff)
}
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
}
psup_out[,1] = c(0,rep(1/(nt0-1), (nt - 1)))
ntj = length(which(psup[,j+1]>0)) + 1
prand = rep(0, nt)
prand[which(psup[,j+1]>0)]  = 1
prand[1] = 1
if (length(y)>=burn) prand[which(pfut > uppfut)] = 0
}
if ((((max(psup[,j+1]) > upper) | sum(prand>0) <= 1  | length(y) >= maxN)) & length(y)>=burn) break
}
if (conjugate_prior == T) {
if (response.type == 'absolute') {
p.est = post0[,1]
low = apply(post0, 1, function(z) qnorm(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qnorm(.975, z[1], z[2]))
}
if (response.type == "rate") {
p.est = post0[,1]/apply(post0,1,sum)
low = apply(post0, 1, function(z) qbeta(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qbeta(.975, z[1], z[2]))
}
if (response.type == "count") {
p.est = post0[,1]/post0[,2]
low = apply(post0, 1, function(z) qgamma(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qgamma(.975, z[1], z[2]))
}
est = data.frame(p.est = p.est, low = low, up = up)
} else est = NULL
if (good.out == F) {
if (response.type == 'absolute') {
theta = - theta
est = -est
low = est$low
est$low = est$up
est$up = low
}
if (response.type == 'rate') {
theta = 1 - theta
est = 1 - est
low = est$low
est$low = est$up
est$up = low
}
}
out = list(psup0 = psup, psup = psup_out, theta = theta, est = est, y = y, x = x[,-1], x0 = x0[,-1])
class(out) = 'trial'
return(out)
}
t0 = RAR_sim(nt = 3, theta0 = c(0,.2,.4), good.out = T, nb = 100, maxN = 1000, N = 1000, upper = 0.95, uppfut = 0.95, lower = .01,
burn = 100, response.type = 'absolute', conjugate_prior = T, padhere = rep(1,3), adapt = F,
compCon = F, MID = 0)
designPlot(t0)
t0 = RAR_sim(nt = 3, theta0 = c(0,.2,.4), good.out = T, nb = 100, maxN = 1000, N = 1000, upper = 0.95, uppfut = 0.95, lower = .01,
burn = 100, response.type = 'absolute', conjugate_prior = T, padhere = rep(1,3), adapt = F,
compCon = T, MID = 0)
RAR_sim = function(nt, theta0, good.out = T, nb = 1, maxN = 500, N = 1000, upper = 0.975, uppfut = 0.95, lower = .01,
burn = 10*nt, response.type, conjugate_prior = T, padhere = rep(1,nt), adapt = T,
compCon = F, MID = 0) {
if (good.out == F) {
if (response.type == 'absolute') theta0 = - theta0
if (response.type == 'rate') theta0 = 1 - theta0
}
ng = nb
j = 0
x = array(0, dim = c(nt, 1))
x0 = array(0, dim = c(nt, 1))
y = NULL
theta = array(rnorm(N*nt, 0, 10), dim = c(N, nt, 1))
check = array(0, dim = c(N, nt))
fcheck = array(0, dim = c(N, nt))
if (conjugate_prior != T | response.type == "absolute") post0 = cbind(rep(0, nt), rep(10, nt))
if (conjugate_prior == T & response.type == "rate") {
post0 = cbind(rep(1, nt), rep(1, nt))
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta = array(- log((1 - p_new) / p_new), dim = c(N, nt, 1))
}
if (conjugate_prior == T & response.type == "count") {
post0 = cbind(rep(.1, nt), rep(.001, nt))
lambda_new = apply(post0, 1, function(x) rgamma(N, x[1], x[2]))
theta = array(log(lambda_new), dim = c(N, nt, 1))
}
psup = array(rep(1/nt, nt), dim = c(nt, 1))
psup_out = array(rep(1/nt, nt), dim = c(nt, 1))
prand = rep(1/nt, nt)
fut.stop = NULL
repeat {
j = j + 1
# if (is.function(updateProgress)) {
#   text <- paste0("updating results based on batch/patient:", j)
#   updateProgress(detail = text)
# }
if (j*nb>maxN) nb = maxN - (j-1)*nb
xb = rmultinom(nb, 1, prob = prand)
xb0 = xb
for (k in 1:nb) {
xb0[which(xb0[,k] == 1), k] = rbinom(1, 1, padhere[which(xb0[,k] == 1)])
}
if (response.type == 'rate') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rbinom(1, 1, prob = z))
}
if (response.type == 'count') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rpois(1, exp(z)))
}
if (response.type == 'absolute') {
yb = apply(t(xb0)%*%theta0, 1, function(z) rnorm(1, z))
}
x = abind(x, xb, along = 2)
x0 = abind(x0, xb0, along = 2)
y = c(y, yb)
if ((response.type == 'rate' | response.type == 'count') & conjugate_prior != T) {
smc_out = SMC_step(theta[,,j], x = xb0, y = yb, N = N, response.type)
theta_new = smc_out$theta
qt = apply(theta_new, 2, sd)/3
Gibbs_out = apply(theta_new, 1, Gibbs, y = y, x = x[,-1], qt = qt,
response.type = response.type, ng)
theta_new = t(sapply(Gibbs_out, function(l) return(l$theta)))
}
if (response.type == 'rate' & conjugate_prior == T) {
post0 = post_beta(yb, xb, post0)
p_new = apply(post0, 1, function(x) rbeta(N, x[1], x[2]))
theta_new = - log((1 - p_new) / p_new)
}
if (response.type == 'count' & conjugate_prior == T) {
post0 = post_gamma(yb, xb, post0)
lambda_new = apply(post0, 1, function(x) rgamma(N, x[1], x[2]))
theta_new = log(lambda_new)
}
if (response.type == 'absolute') {
ysd = ifelse(length(y) == 1, 1, sd(y))
post0 = post_Gauss(yb, xb, post0, ysd)
theta_new = apply(post0, 1, function(x) rnorm(N, x[1], x[2]))
}
#theta_new[,which(addarmlater>j)] = -Inf
theta = abind(theta, theta_new, along = 3)
if (compCon == F) {
check[,which(prand>0)] = t(apply(theta[,which(prand>0),j+1], 1, sup_check))
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
ll = NULL
if (length(which(psup[,j+1] < lower))>0) {
ll = which(psup[,j+1] < lower)
}
if (length(ll) != 0) {
fut.stop = c(fut.stop, ll)
}
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
}
ntj = length(which(psup[,j+1]>0))
prand = rep(0, nt)
if (adapt == T & length(y)>=burn)  {
prand[which(psup[,j+1]>0)] = ((ntj - 1)/ntj)*sqrt(psup[which(addarmlater<=j & psup[,j+1]>0),j+1])
} else prand[which(psup[,j+1]>0)] = 1/ntj
} else {
mat = apply(theta[,which(prand>0),j+1], 1, con_sup_check)
if (is.null(dim(mat))) mat = matrix(mat, N, length(which(prand>0)) - 1) else mat = t(mat)
check[,which(prand>0)] = cbind(rep(0, N), mat)
check[,which(prand==0)] = 0
psup_out = abind(psup_out, apply(check, 2, mean), along = 2)
if (length(y) < burn) {
psup = abind(psup, psup[,j], along = 2)
} else psup = abind(psup, apply(check, 2, mean), along = 2)
if (response.type == 'absolute') fmat = apply(theta[,which(prand>0),j+1], 1, con_fut_check, MID = MID)
if (response.type == 'rate') fmat = apply(p_new[,which(prand>0)], 1, con_fut_check, MID = MID)
if (is.null(dim(fmat))) fmat = matrix(fmat, N, length(which(prand>0)) - 1) else fmat = t(fmat)
fcheck[,which(prand>0)] = cbind(rep(0, N), fmat)
fcheck[,which(prand==0)] = 0
pfut = apply(fcheck, 2, mean)
ff = NULL
if (length(which(pfut > uppfut))>0) ff = which(pfut > uppfut)
if (!is.null(ff)) {
fut.stop = c(fut.stop, ff)
}
if (!is.null(fut.stop)) {
psup[fut.stop,j+1] = 0
}
psup_out[,1] = c(0,rep(1/(nt-1), (nt - 1)))
ntj = length(which(psup[,j+1]>0)) + 1
prand = rep(0, nt)
prand[which(psup[,j+1]>0)]  = 1
prand[1] = 1
if (length(y)>=burn) prand[which(pfut > uppfut)] = 0
}
if ((((max(psup[,j+1]) > upper) | sum(prand>0) <= 1  | length(y) >= maxN)) & length(y)>=burn) break
}
if (conjugate_prior == T) {
if (response.type == 'absolute') {
p.est = post0[,1]
low = apply(post0, 1, function(z) qnorm(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qnorm(.975, z[1], z[2]))
}
if (response.type == "rate") {
p.est = post0[,1]/apply(post0,1,sum)
low = apply(post0, 1, function(z) qbeta(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qbeta(.975, z[1], z[2]))
}
if (response.type == "count") {
p.est = post0[,1]/post0[,2]
low = apply(post0, 1, function(z) qgamma(.025, z[1], z[2]))
up = apply(post0, 1, function(z) qgamma(.975, z[1], z[2]))
}
est = data.frame(p.est = p.est, low = low, up = up)
} else est = NULL
if (good.out == F) {
if (response.type == 'absolute') {
theta = - theta
est = -est
low = est$low
est$low = est$up
est$up = low
}
if (response.type == 'rate') {
theta = 1 - theta
est = 1 - est
low = est$low
est$low = est$up
est$up = low
}
}
out = list(psup0 = psup, psup = psup_out, theta = theta, est = est, y = y, x = x[,-1], x0 = x0[,-1])
class(out) = 'trial'
return(out)
}
t0 = RAR_sim(nt = 3, theta0 = c(0,.2,.4), good.out = T, nb = 100, maxN = 1000, N = 1000, upper = 0.95, uppfut = 0.95, lower = .01,
burn = 100, response.type = 'absolute', conjugate_prior = T, padhere = rep(1,3), adapt = F,
compCon = T, MID = 0)
designPlot(t0)
t0 = RAR_sim(nt = 3, theta0 = c(0,.2,.4), good.out = T, nb = 100, maxN = 1000, N = 1000, upper = 0.95, uppfut = 0.95, lower = .01,
burn = 100, response.type = 'absolute', conjugate_prior = T, padhere = rep(1,3), adapt = F,
compCon = T, MID = 0)
designPlot(t0)
t0 = RAR_sim(nt = 3, theta0 = c(0,.2,.4), good.out = T, nb = 100, maxN = 1000, N = 1000, upper = 0.95, uppfut = 0.95, lower = .01,
burn = 100, response.type = 'absolute', conjugate_prior = T, padhere = rep(1,3), adapt = F,
compCon = T, MID = 0)
designPlot(t0)
psup_plot(t0)
psup_plot(t0, .95)
hist(rbeta(1000, 1, 1))
var(rbeta(1000, 1, 1))
1/12
21/111
hist(rbeta(1000, 3, 7))
var(rbeta(1000, 3, 7))
var(rbeta(1000, 3, 7))
(1000-21)/30
90/7
hist(rbeta(1000. 13, 30))
hist(rbeta(1000, 13, 30))
var(rbeta(1000, 13, 30))
beta = function(a,b, m, v) c(a/(a+b) - m, a*b/((a+b)^2*(a+b+1)) - v)
beta(1,1,.5, .08)
beta(1,1,.5, .083)
beta(1,1,.5, .083333)
nleqslv(c(1,1), beta, m = .3, v = .1)
library(nleqslv)
nleqslv(c(1,1), beta, m = .3, v = .1)
beta = function(x, m, v) c(x[1]/(x[1]+x[2]) - m, x[1]*x[2]/((x[1]+x[2])^2*(x[1]+x[2]+1)) - v)
library(nleqslv)
nleqslv(c(1,1), beta, m = .3, v = .1)
hist(rbeta(1000, .33, .77))
mean(rbeta(1000, .33, .77))
var(rbeta(1000, .33, .77))
nleqslv(c(1,1), beta, m = .3, v = .05)
hist(rbeta(1000, .96, 2.24))
nleqslv(c(1,1), beta, m = .3, v = .01)
hist(rbeta(1000, 6, 14))
nleqslv(c(1,1), beta, m = .3, v = .02)
hist(rbeta(1000, 2.85, 6.65))
nleqslv(c(1,1), beta, m = .03, v = .01)
hist(rbeta(1000, 0.0573, 1.8527))
nleqslv(c(1,1), beta, m = .03, v = .02)
hist(rbeta(1000, 0.0136500, 0.4413501))
nleqslv(c(1,1), beta, m = .03, v = .1)
hist(rbeta(1000, 5, 5))
hist(rbeta(1000, 10, 10))
hist(rbeta(1000, 4, 4))
hist(rbeta(1000, 100, 100))
var(rbeta(1000, 100, 100))
y = rbinom(1000, 1, 0.6)
hist(y)
a1 = 100 + sum(y)
b1 = 1000 - sum(y) + 100
hist(rbeta(1000, a1, b1))
hist(rbeta(1000, 1 + sum(y), 1000 - sum(y) + 1))
hist(rbeta(1000, sum(y), 1000 - sum(y) ))
hist(rbeta(1000, 1 + sum(y), 1000 - sum(y) + 1))
p_s = hist(rbeta(1000, 1 + sum(y), 1000 - sum(y) + 1))
w = exp(-(p_s - 0.5)^2/.0013)
p_s = rbeta(1000, 1 + sum(y), 1000 - sum(y) + 1)
w = exp(-(p_s - 0.5)^2/.0013)
p_new = sample(p_s, 1000, prob = w, replace = F)
hist(p_new)
plot(p_s, w)
p_new = sample(p_s, 1000, prob = w, replace = T)
hist(p_new)
p_t = rbeta(1000, a1, b1)
plot(p_t, w)
w_t = exp(-(p_t - 0.5)^2/.0013)
plot(p_t, w_t)
plot(p_t, p_new)
mean(p_new)
mean(p_t)
var(p_new)
var(p_t)
p_s = rbeta(100000, 1 + sum(y), 1000 - sum(y) + 1)
w = exp(-(p_s - 0.5)^2/.0013)
p_new = sample(p_s, 100000, prob = w, replace = T)
hist(p_new)
hist(p-t)
hist(p_t)
p_t = rbeta(100000, a1, b1)
hist(p_t)
p_s = rbeta(100000, sum(y), 1000 - sum(y) )
w = exp(-(p_s - 0.5)^2/.0013)
p_new = sample(p_s, 100000, prob = w, replace = T)
hist(p_new)
mean(p_new)
mean(p_t)
w = exp(-(p_s - 0.3)^2/.0013)
p_new = sample(p_s, 100000, prob = w, replace = T)
hist(p_new)
library(Rcpp)
